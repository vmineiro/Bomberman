package model.board;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;

import javax.imageio.ImageIO;

import model.Position;


/**
 * This class represents the game board.
 */
public class Board {

	
	/** The maze. */
	private Item[][] maze;
	
	/**
	 * The Enumeration of directions.
	 */
	private HashMap <String, BufferedImage> animations;
	
	/**
	 * Instantiates a new board.
	 */
	public Board(){
		
		try {
			
			BufferedImage wallImg = ImageIO.read(new File("img/wall01.png"));
			BufferedImage steelImg = ImageIO.read(new File("img/wall01.png"));
			BufferedImage pathImg = ImageIO.read(new File("img/wall01.png"));
			BufferedImage boardExitActiveImg = ImageIO.read(new File("img/wall01.png"));
			BufferedImage boardExitInactiveImg = ImageIO.read(new File("img/wall01.png"));
			BufferedImage bombControlImg = ImageIO.read(new File("img/wall01.png"));
			BufferedImage bombPowerUpImg = ImageIO.read(new File("img/wall01.png"));
			BufferedImage boostSpeedlImg = ImageIO.read(new File("img/wall01.png"));
			BufferedImage extraBombImg = ImageIO.read(new File("img/wall01.png"));
			BufferedImage explosionImg = ImageIO.read(new File("img/wall01.png"));
			
			this.animations = new HashMap<String, BufferedImage>();
			this.animations.put("wall",wallImg);
			this.animations.put("steel",steelImg);
			this.animations.put("path",pathImg);
			this.animations.put("activeExit",boardExitActiveImg);
			this.animations.put("inactiveExit",boardExitInactiveImg);
			this.animations.put("bombControl",bombControlImg);
			this.animations.put("bombPowerUP",bombPowerUpImg);
			this.animations.put("boostSpeed",boostSpeedlImg);
			this.animations.put("extraBomb",extraBombImg);
			this.animations.put("explosion",explosionImg);
			
			
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		

	}

	/** 
	 * Method generated by Enterprise Architect
	 * 
	 */
	public void finalize() throws Throwable {

	}
	
	/**
	 * Sets a new maze.
	 *
	 * @param maze the new maze
	 */
	public void setMaze(Item[][] maze){
		this.maze = maze;

	}


	/**
	 * Gets the item, on the line i and column j, form the maze.
	 *
	 * @param i the line of the item
	 * @param j the column of the item
	 * @return the item
	 */
	public Item getItem(Position p){
		return maze[p.getLine()][p.getCol()];
	}
	
	public void explode(Position p){
		
		
		
	}

	public BufferedImage getAnimation(String animation) {
		return animations.get(animation);
	}
}//end Board